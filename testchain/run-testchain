#!/usr/bin/env bash

#  Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.

#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.

#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

# This script was inspired by https://github.com/makerdao/testchain/blob/dai.js/scripts/launch

set -e

export CWD="${0%/*}"
export TESTCHAIN=$CWD/../node_modules/@makerdao/testchain
export VAR=$CWD/var
export PORT=2000

# Check if a testnet is already running
if ! nc -z 127.0.0.1 $PORT; then
  mkdir -p $VAR

  snapshot="mychain"
  echo "Loading snapshots/$snapshot."
  rm -rf $VAR/chaindata
  mkdir $VAR/chaindata
  tar xzf $CWD/snapshots/$snapshot.tgz -C $VAR/chaindata


  # Configure seth
  export ETH_GAS=${ETH_GAS:-"7000000"} # Ganache's default block gas limit
  export ETH_RPC_URL=http://127.1:$PORT

  # Start a testnet
  GANACHE_CLI=$TESTCHAIN/node_modules/.bin/ganache-cli
  if [ ! -e $GANACHE_CLI ]; then
    echo "Installing Ganache..."
    cd $TESTCHAIN
    yarn install
    cd -
  fi

  echo "Starting Ganache..."
  ganache_args=(
    $GANACHE_CLI
    -i 999
    -p $PORT
    -a 1000
    -l $ETH_GAS
    -m "hill law jazz limb penalty escape public dish stand bracket blue jar"
    --db $VAR/chaindata
  )

  "${ganache_args[@]}" > $VAR/ganache.out 2>&1 & netpid=$!

  # Wait for the testnet to become responsive
  until curl -s -o/dev/null "$ETH_RPC_URL"; do
    sleep 1
    if [ -z "$(ps -p $netpid -o pid=)" ]; then
      echo "Ganache stopped running. Check var/ganache.out for errors."
      exit 1
    fi
  done

  # Stop the testnet when this script exits
  trap "kill $netpid" EXIT

else
  echo "Testchain is already running on port $PORT."
fi

# The testnet will continue to run with its deployed contracts
# until the user confirms it should shut down.
echo "Press Ctrl-C to stop the testchain."
while true; do read; done

