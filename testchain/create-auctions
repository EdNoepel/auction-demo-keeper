#!/usr/bin/env bash

#  Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.

#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PdaiICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.

#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

set -e

export CWD="${0%/*}"
export TESTCHAIN=$CWD/../node_modules/@makerdao/testchain
export OUT=$CWD/out
export PORT=2000

########################################
# Configure seth
export ETH_GAS=${ETH_GAS:-"7000000"} # Ganache's default block gas limit
export SETH_STATUS=yes
export ETH_RPC_ACCOUNTS=yes # Don't use ethsign
export ETH_RPC_URL=http://127.1:$PORT
export ETH_FROM=$(seth rpc eth_coinbase)

########################################
# Install mcd-cli (https://stackoverflow.com/a/677212)
if ! command -v mcd &> /dev/null; then
    echo "Installing mcd-cli, as it couldn't be found"
    curl https://raw.githubusercontent.com/makerdao/mcd-cli/master/install.sh | sh
fi
export MCD_CONFIG=$TESTCHAIN/out/addresses-mcd.json

echo "post-mcd"

########################################
# json -> env vars https://stackoverflow.com/a/58859494
# Export addresses from SCD
for keyval in $(grep -E '": [^\{]' $TESTCHAIN/out/addresses.json | sed -e 's/: /=/' -e "s/\(\,\)$//"); do
    eval export $keyval
done

# Export addresses from MCD
for keyval in $(grep -E '": [^\{]' $TESTCHAIN/out/addresses-mcd.json | sed -e 's/: /=/' -e "s/\(\,\)$//"); do
    eval export $keyval
done

# ########################################
# # Export addresses for LIQ2.0
# for keyval in $(grep -E '": [^\{]' $OUT/addresses-for-keeper.json | sed -e 's/: /=/' -e "s/\(\,\)$//"); do
#     eval export $keyval
# done
# ########################################

# Create a risky 199.99 Dai vault, liquidate it, and confirm that an auction was kicked
ink_unsafe=2    # ETH is priced at 150 DAI
dai_unsafe=199.9995  # Amount of Dai to draw and exit (Wad)
ilk_unsafe=ETH-A

seth send $ETH 'approve(address,uint)' $PROXY_DEPLOYER $(seth --to-uint256 $(seth --to-wei 10000000 eth))

echo "Live Auction IDs: $(seth call $MCD_CLIP_ETH_A 'list()')"

echo $ilk_unsafe

mcd -C testnet --ilk=ETH-A ilk

echo after
mcd -C testnet wrap $ink_unsafe > /dev/null
id_unsafe=$(mcd -C testnet --ilk=$ilk_unsafe cdp open | sed -n "s/^Opened: cdp //p") > /dev/null

# Give approval to the deployer's proxy. Used to bypass approval message
seth send $ETH 'approve(address,uint)' $PROXY_DEPLOYER $(seth --to-uint256 $(seth --to-wei 10000000 eth))
echo "Lock in unsafe CDP id"
mcd -C testnet --ilk=$ilk_unsafe cdp $id_unsafe lock $ink_unsafe > /dev/null
echo "Draw from unsafe CDP id"
mcd -C testnet --ilk=$ilk_unsafe cdp $id_unsafe draw $dai_unsafe > /dev/null
echo "Created Vault:"
mcd -C testnet cdp $id_unsafe urn

echo "User has $(seth --to-dec $(seth call $MCD_DAI 'balanceOf(address)' $ETH_FROM)) DAI"

# Call drip to push Vault into an unsafe position
seth send $MCD_JUG 'drip(bytes32)' $(seth --to-bytes32 "$(seth --from-ascii $ilk_unsafe)")

# Confiscate the Vault and send to liquidation
export UNSAFE_URN=$(seth call $CDP_MANAGER 'urns(uint256)(address)' $(seth --to-uint256 $id_unsafe))

# Liquidate the unsafe Urn and send bark rewards to ETH_from
seth send $MCD_DOG 'bark(bytes32,address,address)' $(seth --to-bytes32 "$(seth --from-ascii $ilk_unsafe)") $UNSAFE_URN $ETH_FROM

#Confirm that there is an auction
echo "Live Auction IDs: $(seth call $MCD_CLIP_ETH_A 'list()')"
