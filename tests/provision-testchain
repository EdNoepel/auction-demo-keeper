#!/usr/bin/env bash

#  Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.

#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.

#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.

set -e

# TODO: Figure out why $CWD was modified without explicit reassignment
# Is it because of the context that this script runs in?
export LIB=$CWD/../../

export ETH_FROM=$(seth rpc eth_coinbase)

########################################
# Install mcd-cli (https://stackoverflow.com/a/677212)
if ! command -v mcd &> /dev/null; then
    echo "Installing mcd-cli, as it couldn't be found"
    curl https://raw.githubusercontent.com/makerdao/mcd-cli/master/install.sh | sh
fi
export MCD_CONFIG=$TESTCHAIN/out/addresses-mcd.json

########################################
# json -> env vars https://stackoverflow.com/a/58859494
# Export addresses from SCD
for keyval in $(grep -E '": [^\{]' $TESTCHAIN/out/addresses.json | sed -e 's/: /=/' -e "s/\(\,\)$//"); do
    eval export $keyval
done

# Export addresses from MCD
for keyval in $(grep -E '": [^\{]' $TESTCHAIN/out/addresses-mcd.json | sed -e 's/: /=/' -e "s/\(\,\)$//"); do
    eval export $keyval
done

########################################
# Create 500 Dai to populate Maker-otc
# Amount of collateral to join and lock (Wad)
ink_safe=10 # ETH is priced at 150 DAI
art_safe=500 # Amount of Dai to draw and exit (Wad)
ilk_safe='ETH-C'

mcd -C testnet wrap $ink_safe > /dev/null
id_safe=$(mcd -C testnet --ilk=$ilk_safe cdp open | sed -n "s/^Opened: cdp //p") > /dev/null

# Give approval to the deployer's proxy. Used to bypass approval message
seth send $ETH 'approve(address,uint)' $PROXY_DEPLOYER $(seth --to-uint256 $(seth --to-wei 10000000 eth))
mcd -C testnet --ilk=$ilk_safe cdp $id_safe lock $ink_safe > /dev/null
mcd -C testnet --ilk=$ilk_safe cdp $id_safe draw $art_safe > /dev/null
echo "Created CDP $id_safe with ink=$ink_safe and art=$art_safe"
echo "User has $(seth --to-dec $(seth call $MCD_DAI 'balanceOf(address)' $ETH_FROM)) DAI"

# ########################################
# Build OasisLiquidityProvider and populate maker-otc
# pushd ../../oasis-liquidity-provider/
cd "$LIB/oasis-liquidity-provider"
dapp --use solc:0.5.12 build
export OASIS_LIQUIDITY_PROVIDER=$(dapp create OasisLiquidityProvider)
cd -

mcd -C testnet wrap 10 > /dev/null

seth send $ETH 'approve(address,uint)' $PROXY_DEPLOYER $(seth --to-uint256 $(seth --to-wei 10000000 eth))
seth send $MCD_DAI 'approve(address,uint)' $PROXY_DEPLOYER $(seth --to-uint256 $(seth --to-wei 10000000 eth))

export CALLDATA=$(seth calldata \
                  'linearOffers(address,address,address,uint,uint,uint,uint)' \
                  $MAKER_OTC \
                  $ETH \
                  $MCD_DAI \
                  $(seth --to-uint256 $(seth --to-wei 1 eth)) \
                  $(seth --to-uint256 $(seth --to-wei 0.1 eth)) \
                  $(seth --to-uint256 $(seth --to-wei 0.5 eth)) \
                  $(seth --to-uint256 1))

seth send $PROXY_DEPLOYER 'execute(address,bytes memory)' $OASIS_LIQUIDITY_PROVIDER $CALLDATA


########################################
# Deploy the DSSspell and add LIQ2.0 to MCD via DS-Chief
cd "$LIB/dss"
dapp --use solc:0.6.7 build
export MCD_DOG=$(dapp create Dog $MCD_VAT)
seth send $MCD_DOG 'rely(address)' $MCD_PAUSE_PROXY
seth send $MCD_DOG 'deny(address)' $ETH_FROM

export MCD_CLIP_ETH_A=$(dapp create Clipper $MCD_VAT $MCD_SPOT $MCD_DOG $(seth --to-bytes32 "$(seth --from-ascii 'ETH-A')"))
seth send $MCD_CLIP_ETH_A 'rely(address)' $MCD_PAUSE_PROXY
seth send $MCD_CLIP_ETH_A 'deny(address)' $ETH_FROM

echo "Live Auction IDs: $(seth call $MCD_CLIP_ETH_A 'list()')"

export MCD_ABACUS_ETH_A=$(dapp create StairstepExponentialDecrease)
seth send $MCD_ABACUS_ETH_A 'rely(address)' $MCD_PAUSE_PROXY
seth send $MCD_ABACUS_ETH_A 'deny(address)' $ETH_FROM
# seth send $MCD_DOG 'file(bytes32,address)' "$(seth --to-bytes32 "$(seth --from-ascii "vow")")" "$MCD_VOW"
cd -

# Source is in the intg-6937-liq-2 branch of spells-kovan
cd "$LIB/spells-kovan"
dapp --use solc:0.5.12 build
export DSS_SPELL_LIQ2=$(dapp create DssSpellTestchain $MCD_DOG $MCD_CLIP_ETH_A $MCD_ABACUS_ETH_A)

# Vote, lift, schedule, and cast spell to support LIQ2.0
echo "MKR Balance of ETH_FROM: $(seth --to-dec $(seth call $MCD_GOV 'balanceOf(address)' $ETH_FROM))"
seth send $MCD_GOV 'approve(address)' $MCD_ADM
seth send $MCD_ADM 'lock(uint)' $(seth --to-uint256 $(seth --to-wei 10 eth)) # 10 MKR
seth send $MCD_ADM 'vote(address[])' [$DSS_SPELL_LIQ2]
seth send $MCD_ADM 'lift(address)' $DSS_SPELL_LIQ2
echo "DssSpell located at: $DSS_SPELL_LIQ2"
echo "New Hat: $(seth call $MCD_ADM 'hat()')"
echo "DSPause Delay: $(seth call $MCD_PAUSE 'delay()')"
echo "DSPause Address: $MCD_PAUSE"
echo "DSPause Owner: $(seth call $MCD_PAUSE 'owner()')"
echo "DSPause Authority: $(seth call $MCD_PAUSE 'authority()')"
seth send $DSS_SPELL_LIQ2 'schedule()'
seth send $DSS_SPELL_LIQ2 'cast()'
echo "DssSpell casted"
cd -

# ########################################
# # build CalleeMakerOtc from exchange-callees
cd "$LIB/exchange-callees"
dapp --use solc:0.6.7 build
OASIS_CALLEE=$(dapp create CalleeMakerOtcDai $MAKER_OTC $MCD_CLIP_ETH_A $MCD_JOIN_DAI)
cd -

####################################
# Confirm there are no auctions
echo "Live Auction IDs: $(seth call $MCD_CLIP_ETH_A 'list()')"

echo "ETH-C ilk"
mcd -C testnet --ilk=$ilk_safe ilk

#####################################
# Create a risky 199.99 Dai vault, liquidate it, and confirm that an auction was kicked
ink_unsafe=2    # ETH is priced at 150 DAI
art_unsafe=199.9995  # Amount of Dai to draw and exit (Wad)
ilk_unsafe='ETH-A'

echo "ETH-A ilk"
mcd -C testnet --ilk=$ilk_unsafe ilk

mcd -C testnet wrap $ink_unsafe > /dev/null
id_unsafe=$(mcd -C testnet --ilk=$ilk_unsafe cdp open | sed -n "s/^Opened: cdp //p") > /dev/null

# Give approval to the deployer's proxy. Used to bypass approval message
seth send $ETH 'approve(address,uint)' $PROXY_DEPLOYER $(seth --to-uint256 $(seth --to-wei 10000000 eth))
echo "Lock in unsafe CDP id"
mcd -C testnet --ilk=$ilk_unsafe cdp $id_unsafe lock $ink_unsafe > /dev/null
echo "Draw from unsafe CDP id"
mcd -C testnet --ilk=$ilk_unsafe cdp $id_unsafe draw $art_unsafe > /dev/null
echo "Created Vault:"
mcd -C testnet cdp $id_unsafe urn

echo "User has $(seth --to-dec $(seth call $MCD_DAI 'balanceOf(address)' $ETH_FROM)) DAI"

# Call drip to push Vault into an unsafe position
seth send $MCD_JUG 'drip(bytes32)' $(seth --to-bytes32 "$(seth --from-ascii $ilk_unsafe)")

# Confiscate the Vault and send to liquidation
export UNSAFE_URN=$(seth call $CDP_MANAGER 'urns(uint256)(address)' $(seth --to-uint256 $id_unsafe))

seth send $MCD_DOG 'bark(bytes32,address)' $(seth --to-bytes32 "$(seth --from-ascii $ilk_unsafe)") $UNSAFE_URN

#Confirm that there is an auction
echo "Live Auction IDs: $(seth call $MCD_CLIP_ETH_A 'list()')"

# ########################################
# Build maker-otc-support-methods and deploy

cd "$LIB/maker-otc-support-methods"
dapp --use solc:0.5.12 build
export OTC_SUPPORT=$(dapp create MakerOtcSupportMethods)
echo "OTC_SUPPORT $OTC_SUPPORT"
echo "MCD_DOG $MCD_DOG"
echo "MCD_CLIP_ETH_A $MCD_CLIP_ETH_A"
echo "MCD_ABACUS_ETH_A $MCD_ABACUS_ETH_A"
echo "OASIS_CALLEE $OASIS_CALLEE"




